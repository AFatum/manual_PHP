#******************Основы*************************
#-------------- Привет всем! ------------------------
#=> Первая строка на Ruby
puts 'Hello World!'

#=> тоже самое с помощью print
print "Всем привет!"

#=> отличие в том, что после строки puts, текст автоматом переходит на новую строку
#=> а в print - все строки идут в одну линию.
puts "Hi"
print "there"
print " Ruby"

#--------------- Комментарии -------------------------
#- однострочный коммент

=begin
здесь
помещаем
многострочные комменты
=end

#--------------- Переменные -------------------------
#=> обычная переменная начинается с малой буквы
myNum = 42
myNum = 8
puts myNum

#=> с большой буквы начинаются константы
MyNum = 42
MyNum = 8
puts MyNum
#=> здесь будет ошибка (already initialized constant MyNum),. 
#=> ..потому что нельзя переопределять константу

#=> типы данных - могут быть intenger, float, string, boolean
x = 42      #=> int
y = 1.58    #=> float
z = "Hello" #=> string
b = true    #=> bool

#=> указание переменной в строке, через #{имя переменной}
age = 42
puts "He is #{age} years old"
#=> выведется "He is 42 years old"

#--------------- Математика -------------------------
# основные математические операции
x = 5
y = 2

puts x+y #=> Прибавление
puts x-y #=> Отнимание
puts x/y #=> Деление
puts x*y #=> Умножение

puts x**y #=> Возведение в степень
puts 3**3 #=> 9
puts 2**5 #=> 32

puts x%y #=> Кратность
puts 5%2 #=> 1 потому что остаток при делении - 1
puts 6%3 #=> 0 потому что нет остатка при делении

# - сокращённые операторы
x+=y #=> x=x+y
x-=y #=> x=x-y
x*=y #=> x=x*y
x/=y #=> x=x/y
x%=y #=> x=x%y
x**=y #=> x=x**y

#=> сокращённое объявление (присваивание значений) переменных
#- вметсто
x = 10
y = 20
z = 30
# - можно использоваться сокращённый вариант
x, y, z = 10, 20, 30

#=> математика в скобочках, все, как в математики
puts 5-2*3+3    #=> 2
puts (5-2)*3+3  #=> 12

#--------------- Cтроки -------------------------
# экранирование с обратным слешем \, экранируем одинарню кавычку '
text = 'Ruby\'s syntax is fun'
puts text
#=> вывод Ruby's syntax is fun

text = "Hello \n World"
puts text
#=> Hello
# World

# - математика в строках
a = 5
b = 2
puts "Сумма двух значений #{a+b}"
#=> Сумма двух значений 7

# - конкатенация строк
a = "Привет "
b = "Всем!"
puts a+b  #=> Привет Всем!

# - повторение строк
a = "abc"
puts a*3    #=> abcabcabc
puts '5'*4  #=> 5555

#--------------- Input -------------------------
# метод gets принимает введенное значение от пользователя
x = gets
puts x

# если нужно получить значение от пользователя на новой строке, используется gets.chomp
puts "Введите своё имя"
name = gets.chomp
puts "Привет, #{name}"

#****************** Контрольные структуры *************************
#--------------- Були -------------------------
# Внимание, в ruby только nil и false, возвращают false
# все остальные значения, в т.ч. пустые строки "", ноль, 0, возвращают true

#--------------- Сравнивание -------------------------
a = 5
b = 8
# - равенство
puts a == b #false
puts a == 5 #true
puts a != b #true

# - больше, меньше
puts 12 > 8 #true
puts 5 < 2 #false
puts 5 >= 5.0 #true
puts 3 <= 6 #true

# - строгое сравнение методом .eql?
puts 3 == 3.0 #true
#but
puts 3.eql?(3.0) #false

#--------------- if-else -------------------------
# обычный if
a=42

if a>7
  puts "Yes"
end
#=> "Yes"

# многоуровневые if
num = 16
if num > 7
  puts "Greater than 7"
  if num < 42
    puts "Between 7 and 42"
  end
end
#=> Greater than 7
#=> Between 7 and 42

# обычные if-else
age = 15
if age > 18
  puts "Welcome"
else
  puts "Too young"
end
#=> "Too young"

# elsif
num = 8
if num == 3
  puts "Number is 3"
elsif num == 10
  puts "Number is 10"
elsif num == 7
  puts "Number is 7"
else
  puts "Not found"
end

# unless - вместо "!="
a=42
unless a<10
  puts "Yes"
else
  puts "No"
end
#=> "Yes"

#--------------- логика -------------------------
if a>7 && b<11  # and
if a>7 || b<11  # or
if !(a>5)       # not
if(a>b && b<100) || (a<b && b>100)
  
#--------------- свитчи (кейсы) -------------------------
age = 18

case age
  when 1, 2, 3
    puts "Little baby"
  when 4, 5
    puts "Child"
  else
    puts "Not a baby"
end
  
#--------------- while и until циклы -------------------------
# while-цикл исполняется пока условие истинное
x=0
while x<10
  puts x
  x+=1
end

# until-циклы обратные, исполняются когда условие ложное
a=0
until a>10
  puts "a = #{a}"
  a+=2
end
  
#--------------- Ранги -------------------------
# - ранг с включительным последним элементом
a = (1..7).to_a
puts a #=> [1,2,3,4,5,6,7]
c = ("a".."d").to_a
puts c #=> [a, b, c, d]

# - ранг БЕЗ включительного последнего элемента
b = (79...82).to_a
puts b #=> [79,80,81]

# использование рангов в кейсах
age = 42
case age
  when 0..14
    puts "Child"
  when 15..24
    puts "Youth"
  when 25..64
    puts "Senior"
end
  
#--------------- Циклы For и loop do -------------------------
# For-цикл исполняется, пока значение заданной переменной..
#..находится в пределах заданного диапазона, например:
for i in (1...10)
  puts i
end

# досрочная остановка цикла, с помощью break
for i in (1...10)
  break if i>3
  puts i
end

# next, как аналог continue
for i in (1...10)
  next if i<3
  puts i
end

# redo повторяет текущую итерацию
for i in (1...10)
  redo if i<3
  puts i
end

# retry повторяет весь цикл
# здесь пока какая-то ошибка, 
# возможно только использование в связке с Begin/Rescue
for i in (1...10)
  retry if i<3
  puts i
end

# цикл loop do
x=0
loop do
  puts x
  x+=1
  break if x>10
end
# если не указать break, то будет зацикливание
# т.е. условие принудительного выхода, должно быть обязательно
  
#--------------- Массивы ----------------------------------------
# обычный массив
items = ["Apple", "Orange", "Banana"]
puts items[0] #=> Apple
puts items[1] #=> Orange

# содержание нескольких типов данных
arr = [5, "Dave", 15.88, false]
puts arr[0] #=> 5
puts arr[1] #=> Dave
puts arr[-1] #=> false
# отрицательное значение в ключе отображает последний элемент
# т.е. ключ -1 даст последний элемент, -2 предпоследний и т.д.

# добавление элемента в конец массива
arr << 8
puts arr[-1] #=> 8

arr.push(9)
puts arr[-1] #=> 9

# добавление элемента в нужную позицию массива
arr.insert(2, 10)
# здесь мы добавили значение 10 в ключ с индексом 2
puts arr[2] #=> 10

# удаление поседнего элемента массива
arra = [1, 2, 3]
arra.pop
print arra #=> [1, 2]

# удаление определенного элемента массива
arra = [2, 4, 6, 8]
arra.delete_at(2)
print arra #=> [2, 4, 8]

# использование рангов в массивах
nums = [6, 3, 8, 7, 9]
print nums[1..3] #=> [3, 8, 7]
  
#--------------- Работа с массивами ----------------------------------------
# соединение (сложение) массивов
a = [1, 2, 3]
b = [4, 5]

res = a+b
print res
#=> [1, 2, 3, 4, 5]

# результатом отнимания массивов, станет массив с элементами первого массива,.. 
#.. без элементов второго
a = [1, 2, 3, 4, 5]
b = [2, 4, 5, 6]
res = a-b
print res #=> [1, 3]

# дублирование элементов массива при выводе
a = [1, 2, 3]
print a*3 #=> [1, 2, 3, 1, 2, 3, 1, 2, 3]

# оператор & вернет новый массив из дублирующих элементов двух разных массивов
a = [1, 2, 3, 4, 5]
b = [2, 4, 5, 6]
res = a&b
print res #=> [2, 4, 5]

# оператор | обратно вернет массив из элементов двух массивов, которые НЕ дублируются
a = [1, 2, 3, 4, 5]
b = [2, 4, 5, 6]
res = a|b
print res #=> [1, 2, 3, 4, 5, 6]
# т.е. здесь остаётся только один элемент из двух дублирующихся

# изменение порядка элементов массива 
# метод reverse вернет новый массив с элементами в обратном порядке
arr = [5, 3, 8]
res = arr.reverse
print arr #=> [5, 3, 8]
print res #=> [8, 3, 5]

# метод reverse!, перевернет порядок элементов в текущем массиве, без создания нового
arr = [5, 3, 8]
res = arr.reverse!
print arr #=> [8, 3, 5]
print res #=> [8, 3, 5]
  
  # остальные методы работы с массивами
a = [1, 2, 3, 4, 5]

# возврат количества элементов
puts a.length #=> 5
puts a.size   #=> 5

# возврат дубликатов массива в отдельный массив
b = [1, 2, 1, 4, 2]
res = b.uniq
puts b    #=> 1, 2, 1, 4, 2
puts res  #=> 1, 2, 4

# возврат дубликатов массива в том же массив
res = b.uniq!
puts b    #=> 1, 2, 4
puts res  #=> 1, 2, 4

# сортировка массива
c = [5, 1, 8, 3]
r = c.sort
puts c #=> 5, 1, 8, 3
puts r #=> 1, 3, 5, 8

# в том же массиве
r = c.sort!
puts c #=> 1, 3, 5, 8
puts r #=> 1, 3, 5, 8

# freeze - блокирует (замораживает) массив от изменения
c = [5, 1, 8, 3]
r = c.freeze
puts c #=> 5, 1, 8, 3
puts r #=> 5, 1, 8, 3
puts r.sort! #=> error
puts r.sort #=> 1, 3, 5, 8

# include?(el) - проверяет наличие элементов в массиве
c = [5, 1, 8, 3]
puts c.include?(1) #=> true
puts c.include?(6) #=> false

# max, min - максимальное, минимальное значения массивов
c = [5, 1, 8, 3]
puts c.max #=> 8
puts c.min #=> 1

# использование массивов в цикле for
arr = ["a", "b", "c"]
for x in arr
  puts "Value: #{x}"
end
  
  